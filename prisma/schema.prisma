// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean       @default(false)
  image            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  twoFactorEnabled Boolean       @default(false)
  sessions         Session[]
  accounts         Account[]
  memberships      Membership[]
  clients          Client[]
  appointments     Appointment[]
  staffProfiles    Staff[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// ── Enums ─────────────────────────────────────────────────────────────
enum Role {
  OWNER
  STAFF
}

enum AppointmentStatus {
  BOOKED
  CANCELED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  REFUNDED
  FAILED
}

enum PaymentProvider {
  STRIPE
  CASH
  EFTPOS
  OTHER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// ── Tenancy ───────────────────────────────────────────────────────────
model Salon {
  id           String  @id @default(cuid())
  name         String
  slug         String  @unique
  timeZone     String
  customDomain String? @unique
  logoUrl      String?

  // Required for concurrent bookings control
  capacity Int // e.g., number of chairs/rooms

  // Onboarding completion status
  hasCompletedOnboarding Boolean @default(false)

  // Stripe Connect integration
  stripeAccountId       String?   @unique // Connected account ID (acct_...)
  stripeAccountStatus   String? // onboarding status tracking
  stripeChargesEnabled  Boolean   @default(false)
  stripePayoutsEnabled  Boolean   @default(false)
  stripeOnboardedAt     DateTime?
  stripeRequirementsDue String[]  @default([]) // JSON array of missing requirements

  // Application fee configuration (platform revenue)
  platformFeePercent  Int @default(10) // 10% default
  platformFeeMinCents Int @default(50) // $0.50 minimum

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  memberships       Membership[]
  serviceCategories ServiceCategory[]
  services          Service[]
  clients           Client[]
  appointments      Appointment[]
  businessHours     BusinessHours[]
  closures          SalonClosure[]
  staff             Staff[]

  @@map("salon")
}

model Membership {
  id      String @id @default(cuid())
  userId  String
  salonId String
  role    Role

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, salonId])
  @@unique([userId, role]) // Ensures one user can only have one role of each type (e.g., one OWNER role)
  @@index([salonId, role])
  @@map("membership")
}

// ── Staff Profile ─────────────────────────────────────────────────────
model Staff {
  id      String  @id @default(cuid())
  salonId String
  userId  String
  phone   String? // Salon-specific phone (optional override)
  color   String  @default("#3B82F6") // Default blue color
  active  Boolean @default(true)
  notes   String?

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[] // appointments assigned to this staff

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([salonId, userId])
  @@index([salonId])
  @@index([userId])
  @@map("staff")
}

// ── Catalog: Categories & Services ────────────────────────────────────
model ServiceCategory {
  id      String @id @default(cuid())
  salonId String
  name    String
  order   Int    @default(0)

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]

  @@unique([salonId, name])
  @@index([salonId])
  @@map("service_category")
}

model Service {
  id              String  @id @default(cuid())
  salonId         String
  categoryId      String?
  name            String
  durationMinutes Int
  priceCents      Int     @default(0)
  active          Boolean @default(true)

  salon    Salon            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  category ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  appointmentItems AppointmentItem[]

  @@unique([salonId, name])
  @@index([salonId])
  @@map("service")
}

// ── Clients ───────────────────────────────────────────────────────────
model Client {
  id        String  @id @default(cuid())
  salonId   String
  userId    String? // optional linkage if client signs up
  firstName String
  lastName  String?
  email     String?
  phone     String?
  notes     String?

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@unique([salonId, email]) // allows multiple nulls; enforces uniqueness when present
  @@index([salonId])
  @@map("client")
}

// ── Appointments (multi-service via AppointmentItem) ──────────────────
model Appointment {
  id              String            @id @default(cuid())
  salonId         String
  clientId        String
  assignedStaffId String? // optional staff assignment
  startsAt        DateTime
  endsAt          DateTime
  status          AppointmentStatus @default(BOOKED)
  notes           String?
  createdByUserId String? // staff/owner who created it; null if self-serve

  salon         Salon  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  client        Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  assignedStaff Staff? @relation(fields: [assignedStaffId], references: [id], onDelete: SetNull)
  createdBy     User?  @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)

  items    AppointmentItem[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // For overlap control, handle in app logic or use DB-level exclusion in a custom migration

  @@index([salonId, startsAt])
  @@index([clientId, startsAt])
  @@index([assignedStaffId])
  @@index([status])
  @@map("appointment")
}

model AppointmentItem {
  id            String @id @default(cuid())
  appointmentId String
  serviceId     String

  // Snapshots to protect historical records if catalog changes later
  serviceName     String
  priceCents      Int
  durationMinutes Int
  sortOrder       Int    @default(0)

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())

  @@index([appointmentId])
  @@map("appointment_item")
}

// ── Payments ──────────────────────────────────────────────────────────
model Payment {
  id            String          @id @default(cuid())
  appointmentId String
  amountCents   Int
  currency      String          @default("AUD")
  provider      PaymentProvider
  providerRef   String? // e.g. Stripe PaymentIntent ID
  status        PaymentStatus   @default(PENDING)
  capturedAt    DateTime?
  refundedAt    DateTime?

  // Stripe-specific fields
  stripeSessionId       String? @unique // Checkout Session ID
  stripePaymentIntentId String? @unique // Payment Intent ID
  stripeChargeId        String? // Charge ID for refunds
  stripeFeeAmount       Int? // Stripe's fee (in cents)
  platformFeeAmount     Int? // Platform's application fee (in cents)
  netAmount             Int? // Amount salon receives (in cents)
  stripeRefundId        String? // Refund identifier

  // Link to connected account
  connectedAccountId String? // The salon's Stripe account

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([appointmentId])
  @@index([status])
  @@map("payment")
}

// ── Salon Availability ────────────────────────────────────────────────
model BusinessHours {
  id        String    @id @default(cuid())
  salonId   String
  dayOfWeek DayOfWeek
  openTime  String // Format: "09:00" (24-hour format)
  closeTime String // Format: "17:30" (24-hour format)
  isClosed  Boolean   @default(false) // true if salon is closed this day

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([salonId, dayOfWeek])
  @@index([salonId])
  @@map("business_hours")
}

model SalonClosure {
  id          String   @id @default(cuid())
  salonId     String
  startDate   DateTime // Start of closure (date only or datetime)
  endDate     DateTime // End of closure (date only or datetime)
  reason      String? // e.g., "Holiday", "Vacation", "Maintenance"
  isRecurring Boolean  @default(false) // for annual holidays

  salon Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([salonId, startDate, endDate])
  @@map("salon_closure")
}
